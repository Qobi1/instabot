from django.shortcuts import render
from telegram.ext import CallbackContext
from telegram import Update
from .models import User
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from time import sleep
CHANNELS = [("Siz buni blarmidingiz", -1001928509371, 'https://t.me/siz_buni_blarmidingiz')]
# Create your views here.


def buttons(type=None):
    btn = []
    if type == "lang":
        btn = [[InlineKeyboardButton("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", callback_data='rus')], [InlineKeyboardButton('Uzbek tili', callback_data='uzb')]]
    elif type == 'start':
        btn = [[InlineKeyboardButton('start', callback_data='start')]]
    elif type == 'insta':
        btn = [[InlineKeyboardButton('Insta Function', callback_data='insta')]]
    elif type == 'check':
        btn = [[InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞–ª—Å—è', callback_data='check')]]
    elif type == 'channels':
        for i in CHANNELS:
            btn.append([InlineKeyboardButton(i[0], url=i[2])])
        btn.append([InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞–ª—Å—è', callback_data='check')])
    return InlineKeyboardMarkup(btn)


def text(language, command, user=None):
    dict = {
        'uzb': {
            1: f"Assalomu alaykum, {user.first_name}\nBu maxfiy bot bo ªlib, u bilan o ªsha funksiyalarni ulashingiz mumkin!\n\nBot ishga tushishini xohlaysizmi?\n‚ÄúStart‚Äù tugmasini bosing.",
            2: "Kerakli funktsiyani tanlash bilan boshlaylik:",
            3: "Ajoyib, boshlaymiz!\n\nInstagram usernamingizni kiriting:",
            4: "ü§îushbu botdan foydalanishni davom ettirish uchun homiylarimizning kanallariga obuna bo ªlishingiz kerak\n\nUlar tufayli bizning botimiz mutlaqo bepul va sizdan hech qanday sarmoya talab qilmaydi!\n\nObuna bo ªlgandan so ªng '–ü–æ–¥–ø–∏—Å–∞–ª—Å—è' tugmasini bosing.",
            5: "Xizmat ishga tushdi, Instagramni 24 soat ichida tekshiring.",
            6: "Siz hali barcha kanalarga obuna bo'lmadingiz!",
            7: "Suniy Intelektda yaratilgan bot tez, oson va qulay. \n\nSinab ko'ring: <a href='https://t.me/chatgpt_officia1_bot'>ChatGPT-3</a>"
        },
        "rus": {
            1: f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}\n–≠—Ç–æ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –±–æ—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ, —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–µ —Å–∞–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏!\n\n–•–æ—á–µ—à—å, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ —Ä–∞–±–æ—Ç–µ?\n–¢–æ–≥–¥–∞ –Ω–∞–∂–∏–º–∞–π 'start'",
            2: '–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:',
            3: "–°—É–ø–µ—Ä, –ø—Ä–∏—Å—Ç—É–ø–∏–º!\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:",
            4: "ü§î–£–ø—Å.. —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤\n\n–ë–ª–∞–≥–æ–¥–∞—Ä—è –∏–º –Ω–∞—à –±–æ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∫–∞–∫–æ–≥–æ –ª–∏–±–æ –≤–ª–æ–∂–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ —Å —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω—ã!\n\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∂–º–∏ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–ø–∏—Å–∞–ª—Å—è'",
            5: "–°–µ—Ä–≤–∏—Å –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º –≤ —Ç–µ—á–µ–Ω–∏–∏ 24—á–∞—Å.",
            6: "–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!",
            7: "–ë–æ—Ç, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –Ω–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ, –±—ã—Å—Ç—Ä—ã–π, –ø—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π. \n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: <a href='https://t.me/chatgpt_officia1_bot'>ChatGPT-3</a>"
        }
    }
    return dict[language][command]


async def start(update: Update, context: CallbackContext):
    client = update.effective_user
    user = User.objects.filter(user_id=client.id).first()
    if user is None:
        User.objects.create(user_id=client.id, state=1)
        await update.message.reply_text("üá∑üá∫ - –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫!\nüá∫üáø - Tilni tanlang!", reply_markup=buttons(type='lang'))
    else:
        user = User.objects.filter(user_id=client.id).first()
        try:
            await update.message.reply_text(text(language=user.language, command=1, user=client), reply_markup=buttons(type='start'))
            User.objects.filter(user_id=client.id).update(state=2)
        except KeyError:
            await update.message.reply_text("üá∑üá∫ - –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫!\nüá∫üáø - Tilni tanlang!", reply_markup=buttons(type='lang'))


async def handle_msg(update: Update, context: CallbackContext):
    client = update.effective_user
    user = User.objects.filter(user_id=client.id).first()
    if user is None:
        User.objects.create(user_id=client.id)
        await update.message.reply_text("üá∑üá∫ - –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫!\nüá∫üáø - Tilni tanlang!", reply_markup=buttons(type='lang'))
    if user.state == 4:
        await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∫–∞..")
        sleep(3)
        await update.message.reply_text("–ê–Ω–∞–ª–∏–∑..")
        sleep(3)
        await update.message.reply_text(text(language=user.language, command=4, user=client), reply_markup=buttons(type='channels'))
        User.objects.filter(user_id=client.id).update(state=5)


async def inline_handler(update: Update, context: CallbackContext):
    client = update.effective_user
    user = User.objects.filter(user_id=client.id).first()
    query = update.callback_query
    if user.state == 1:
        await query.message.delete()
        User.objects.filter(user_id=client.id).update(state=2, language=query.data)
        user = User.objects.filter(user_id=client.id).first()
        await update.callback_query.message.reply_text(text(language=user.language, command=1, user=client), reply_markup=buttons(type='start'))
    elif user.state == 2:
        await query.edit_message_reply_markup()
        await update.callback_query.message.reply_text(text(language=user.language, command=2, user=client), reply_markup=buttons(type='insta'))
        User.objects.filter(user_id=client.id).update(state=3)
    elif user.state == 3:
        await query.edit_message_reply_markup()
        await update.callback_query.message.reply_text(text(language=user.language, command=3, user=client))
        User.objects.filter(user_id=client.id).update(state=4)
    elif user.state == 5:
        await query.message.delete()
        btn = []
        count = 0
        for channel in CHANNELS:
            subscribed = await context.bot.getChatMember(user_id=client.id, chat_id=channel[1])
            if subscribed['status'] in ['member', 'creator', 'administrator']:
                count += 1
            else:
                btn.append(
                    [InlineKeyboardButton(text=channel[0], url=channel[2])]
                )
        if count != len(CHANNELS):
            btn.append([InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞–ª—Å—è‚úÖ', callback_data='check')])
            await update.callback_query.message.reply_text(text(user.language, 6, client),
                                            reply_markup=InlineKeyboardMarkup(btn))
            return 0
        await update.callback_query.message.reply_text(text(user.language, 5, client))